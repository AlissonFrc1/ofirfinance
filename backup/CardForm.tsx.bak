"use client";

import { useState } from 'react';
import { XMarkIcon } from '@heroicons/react/24/outline';

interface CardFormProps {
  onSubmit: (data: CardFormData) => void;
  onClose: () => void;
  initialData?: Partial<CardFormData>;
}

export interface CardFormData {
  name: string;
  lastDigits: string;
  limit: number;
  dueDay: number;
  closingDay: number;
  color: string;
  bank: string;
}

const COLORS = [
  '#1A1A2E',   // Dark Blue
  '#4A4E69',   // Slate Gray
  '#6A4C93',   // Purple
  '#1982C4',   // Blue
  '#8AC926',   // Green
  '#FF924C',   // Orange
  '#FF6B6B',   // Red
  '#7209B7',   // Deep Purple
  '#3A86FF',   // Bright Blue
  '#023E8A',   // Navy Blue
];

export function CardForm({ onSubmit, onClose, initialData }: CardFormProps) {
  console.log('=== INÍCIO DEBUG FORMULÁRIO DE CARTÃO ===');
  console.log('1. Dados iniciais recebidos:', initialData);
  
  const [formData, setFormData] = useState<CardFormData>({
    name: initialData?.name || '',
    lastDigits: initialData?.lastDigits || '',
    limit: initialData?.limit || 0,
    dueDay: initialData?.dueDay || 1,
    closingDay: initialData?.closingDay || 1,
    color: initialData?.color || COLORS[0],
    bank: initialData?.bank || '',
  });

  console.log('2. Estado inicial do formulário:', formData);
  console.log('=== FIM DEBUG FORMULÁRIO DE CARTÃO ===');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="bg-card-bg rounded-xl w-full max-w-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold">
            {initialData ? 'Editar Cartão' : 'Novo Cartão'}
          </h2>
          <button
            onClick={onClose}
            className="text-text-secondary hover:text-text-primary transition-colors"
          >
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm text-text-secondary mb-1">
              Nome do Cartão
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="w-full bg-background border border-divider rounded-lg px-4 py-2 text-text-primary focus:border-primary focus:outline-none"
              required
            />
          </div>

          <div>
            <label className="block text-sm text-text-secondary mb-1">
              Banco/Instituição
            </label>
            <input
              type="text"
              value={formData.bank}
              onChange={(e) => setFormData({ ...formData, bank: e.target.value })}
              className="w-full bg-background border border-divider rounded-lg px-4 py-2 text-text-primary focus:border-primary focus:outline-none"
              required
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm text-text-secondary mb-1">
                Últimos 4 dígitos
              </label>
              <input
                type="text"
                maxLength={4}
                pattern="[0-9]{4}"
                value={formData.lastDigits}
                onChange={(e) =>
                  setFormData({ ...formData, lastDigits: e.target.value })
                }
                className="w-full bg-background border border-divider rounded-lg px-4 py-2 text-text-primary focus:border-primary focus:outline-none"
                required
              />
            </div>
            <div>
              <label className="block text-sm text-text-secondary mb-1">
                Limite
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.limit}
                onChange={(e) =>
                  setFormData({ ...formData, limit: parseFloat(e.target.value) })
                }
                className="w-full bg-background border border-divider rounded-lg px-4 py-2 text-text-primary focus:border-primary focus:outline-none"
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm text-text-secondary mb-1">
                Dia do Vencimento
              </label>
              <input
                type="number"
                min="1"
                max="31"
                value={formData.dueDay}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    dueDay: parseInt(e.target.value),
                  })
                }
                className="w-full bg-background border border-divider rounded-lg px-4 py-2 text-text-primary focus:border-primary focus:outline-none"
                required
              />
            </div>
            <div>
              <label className="block text-sm text-text-secondary mb-1">
                Dia do Fechamento
              </label>
              <input
                type="number"
                min="1"
                max="31"
                value={formData.closingDay}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    closingDay: parseInt(e.target.value),
                  })
                }
                className="w-full bg-background border border-divider rounded-lg px-4 py-2 text-text-primary focus:border-primary focus:outline-none"
                required
              />
            </div>
          </div>

          <div>
            <label className="block text-sm text-text-secondary mb-2">
              Cor do Cartão
            </label>
            <div className="flex space-x-2">
              {COLORS.map((color) => (
                <button
                  key={color}
                  type="button"
                  onClick={() => setFormData({ ...formData, color })}
                  className={`w-8 h-8 rounded-full transition-all duration-200 
                    ${formData.color === color 
                      ? 'ring-4 ring-primary/50 scale-110' 
                      : 'hover:scale-110 hover:ring-2 hover:ring-primary/30'}`}
                  style={{ 
                    backgroundColor: color,
                    boxShadow: formData.color === color 
                      ? `0 0 0 3px ${color}40` 
                      : 'none' 
                  }}
                  aria-label={`Selecionar cor ${color}`}
                />
              ))}
            </div>
          </div>

          <div className="flex gap-4 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-divider rounded-lg text-text-secondary hover:text-text-primary transition-colors"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="flex-1 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
            >
              {initialData ? 'Atualizar' : 'Adicionar'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
} 